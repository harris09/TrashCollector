import java.io.IOException;

import com.google.maps.DirectionsApi.RouteRestriction;
import com.google.maps.DistanceMatrixApi;
import com.google.maps.DistanceMatrixApiRequest;
import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.errors.ApiException;
import com.google.maps.model.DistanceMatrix;
import com.google.maps.model.GeocodingResult;
import com.google.maps.model.LatLng;
import com.google.maps.model.TravelMode;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class DistanceFinder {
	static String API_KEY = "AIzaSyCpOGjDglR5_pLm0T9AlPZv_pDlbz8FYN0";
    
    public static String[] getDistance(String[] latlongArrSrc, String[] latlongArrDist) {
		Double latSrc = Double.parseDouble(latlongArrSrc[0]);
		Double lonSrc = Double.parseDouble(latlongArrSrc[1]);	
		Double latDist = Double.parseDouble(latlongArrDist[0]);
		Double lonDist = Double.parseDouble(latlongArrDist[1]);	      
				
    	GeoApiContext distCalcer = new GeoApiContext.Builder().apiKey(API_KEY).build();
		
		DistanceMatrixApiRequest req = DistanceMatrixApi.newRequest(distCalcer);
		LatLng addrOneLatLng  = new LatLng(latSrc, lonSrc);
		LatLng addrTwoLatLng  = new LatLng(latDist, lonDist);
		GeocodingResult[] addrOne = null;
		GeocodingResult[] addrTwo = null;
		try {
			addrOne = GeocodingApi.reverseGeocode(distCalcer, addrOneLatLng).await();
			addrTwo = GeocodingApi.reverseGeocode(distCalcer, addrTwoLatLng).await();;
		} catch (ApiException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		};

	    System.out.println("Source: "+addrOne[0].formattedAddress);
	    System.out.println("Destination: "+addrTwo[0].formattedAddress);
	    
		DistanceMatrix result = null;
		try {
			result = req.origins(addrOne[0].formattedAddress)
			       .destinations(addrTwo[0].formattedAddress)
			       .mode(TravelMode.DRIVING)
			       .avoid(RouteRestriction.TOLLS)
			       .language("en-US")
			       .await();
		} catch (ApiException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String[] resultArray = new String[3];
		resultArray[0] = addrOne[0].formattedAddress;
		resultArray[1] = addrTwo[0].formattedAddress;
		resultArray[2] = result.rows[0].elements[0].distance.humanReadable;
        return resultArray;
    }
    
    public boolean someLibraryMethod() {
        return true;
    }    
}
